Quiz
    I made a quiz (if you want to check the quiz it is going to be in iphone 15 :>) with fake data. Can you design the database for it and make a backedn for it; 
    Here is the fake data that i use for the quiz: 
        final List<Map<String, dynamic>> questions = [
        {
            'question': 'What is 2 + 2?',
            'answers': ['3', '4', '5', '6'],
            'correctIndex': 1,
        },
        {
            'question': 'What is the capital of France?',
            'answers': ['Berlin', 'Madrid', 'Paris', 'Rome'],
            'correctIndex': 2,
        },
        {
            'question': 'What is the largest planet in our solar system?',
            'answers': ['Earth', 'Mars', 'Jupiter', 'Saturn'],
            'correctIndex': 2,
        },
        {
            'question': 'What color is Rafid?',
            'answers': ['Black', 'White', 'Yellow', 'Rainbow'],
            'correctIndex': 0,
        },
        ];

    So your task is to design the database and write an Api for it, it should return the json data so i can use it for my quiz i need 10 question for each quiz. 

    Here is the example that Ai made, may be you want to develop it or use it derectly for u can just make an Api that return json data, I think i will connect it myself:

    Design the MySQL Database:

        We will create a database to store the questions, answers, and correct answer indices.
        Write a Node.js Server:

        Use Express.js to create a RESTful API for interacting with the database.
        Provide endpoints to fetch questions and answers.
        1. MySQL Database Design
            Tables:
                questions: Stores the question text and metadata.
                answers: Stores the possible answers for each question.
                Database Schema:
                    CREATE DATABASE quiz_app;

                    USE quiz_app;

                    -- Table to store questions
                    CREATE TABLE questions (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        question_text VARCHAR(255) NOT NULL
                    );

                    -- Table to store answers
                    CREATE TABLE answers (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        question_id INT NOT NULL,
                        answer_text VARCHAR(255) NOT NULL,
                        is_correct BOOLEAN NOT NULL,
                        FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
                    );
            Explanation:
                The questions table stores each question with a unique ID.
                The answers table stores the possible answers for each question and indicates whether an answer is correct (is_correct).
        2. Node.js Server
            Dependencies:
                Run the following command to install necessary packages:
                    npm install express mysql2 body-parser
        Server Code:
        3. Populating the Database
        Hereâ€™s how to insert the sample data into the database:

        Insert Questions:
            INSERT INTO questions (question_text) VALUES
            ('What is 2 + 2?'),
            ('What is the capital of France?'),
            ('What is the largest planet in our solar system?'),
            ('What color is Rafid?');
        Insert Answers:
            INSERT INTO answers (question_id, answer_text, is_correct) VALUES
            (1, '3', FALSE),
            (1, '4', TRUE),
            (1, '5', FALSE),
            (1, '6', FALSE),

            (2, 'Berlin', FALSE),
            (2, 'Madrid', FALSE),
            (2, 'Paris', TRUE),
            (2, 'Rome', FALSE),

            (3, 'Earth', FALSE),
            (3, 'Mars', FALSE),
            (3, 'Jupiter', TRUE),
            (3, 'Saturn', FALSE),

            (4, 'Black', TRUE),
            (4, 'White', FALSE),
            (4, 'Yellow', FALSE),
            (4, 'Rainbow', FALSE);
            4. Testing the API
        Start the server:

        node server.js:
            const express = require('express');
            const mysql = require('mysql2');
            const bodyParser = require('body-parser');

            const app = express();
            const port = 3000;

            // Middleware
            app.use(bodyParser.json());

            // MySQL Connection
            const db = mysql.createConnection({
            host: 'localhost',
            user: 'root', // Replace with your MySQL username
            password: '', // Replace with your MySQL password
            database: 'quiz_app'
            });

            db.connect((err) => {
            if (err) {
                console.error('Error connecting to the database:', err);
                return;
            }
            console.log('Connected to MySQL database');
            });

            // Endpoint to fetch all questions with their answers
            app.get('/questions', (req, res) => {
            const query = `
                SELECT 
                q.id AS question_id, 
                q.question_text, 
                a.id AS answer_id, 
                a.answer_text, 
                a.is_correct 
                FROM questions q
                JOIN answers a ON q.id = a.question_id
                ORDER BY q.id, a.id;
            `;

            db.query(query, (err, results) => {
                if (err) {
                console.error('Error fetching questions:', err);
                res.status(500).send('Error fetching questions');
                return;
                }

                // Group answers by question
                const questions = {};
                results.forEach((row) => {
                if (!questions[row.question_id]) {
                    questions[row.question_id] = {
                    id: row.question_id,
                    question: row.question_text,
                    answers: []
                    };
                }
                questions[row.question_id].answers.push({
                    id: row.answer_id,
                    text: row.answer_text,
                    isCorrect: row.is_correct
                });
                });

                res.json(Object.values(questions));
            });
            });

            // Start the server
            app.listen(port, () => {
            console.log(`Server running on http://localhost:${port}`);
            });

        Test the /questions endpoint using a tool like Postman or your browser:
            URL: http://localhost:3000/questions
            Method: GET
            Expected JSON Response:
                [
                {
                    "id": 1,
                    "question": "What is 2 + 2?",
                    "answers": [
                    { "id": 1, "text": "3", "isCorrect": false },
                    { "id": 2, "text": "4", "isCorrect": true },
                    { "id": 3, "text": "5", "isCorrect": false },
                    { "id": 4, "text": "6", "isCorrect": false }
                    ]
                },
                {
                    "id": 2,
                    "question": "What is the capital of France?",
                    "answers": [
                    { "id": 5, "text": "Berlin", "isCorrect": false },
                    { "id": 6, "text": "Madrid", "isCorrect": false },
                    { "id": 7, "text": "Paris", "isCorrect": true },
                    { "id": 8, "text": "Rome", "isCorrect": false }
                    ]
                },
                ...
                ]
        Summary
        You now have:

        A MySQL database to store questions and answers.
        A Node.js server with an endpoint to fetch questions and their answers.
        A way to populate the database with sample data.


So try to do it and if you cannot do something or not clear somewhere ask me.











Uh so first
tyyy for straight up typing out da code appreciate it
I optimized it a bit w/ env
db keeps timing out smh

I did it, i connected to db FBLA_Mobile_Application_2025 (i just create it) and finished the api and connected to flutter quiz app you can try to add something to table and restart the flutter code!